# Needed to prevent Make from parsing a comma as part of Make syntax (even inside a string)
COMMA := ,
REPEAT = 1 # How many times to repeat each run
INT_VERSION = false
NUMBER_OF_VERTICES1 = 10
NUMBER_OF_VERTICES2 = 10
EDGE_PROBABILITY = 0.5
EDGE_PROBABILITY_RANGE = 0 0.5 1 # First, increment, last
LABEL_PROBABILITY = 0.3
LABEL_PROBABILITY_RANGE = 0 0.5 1 # First, increment, last
#SIZE_OF_CLIQUE = 5
DATABASE = GREC

# A list of filenames for each MiniZinc model. Must be in the same order as model files for each rule. The same name with a
# dzn extension must be generated by the generator.
FILENAMES = cp.csv vertex-weights.csv vertex-edge-weights.csv
MWC_FILE = mwc.csv
CSV_FILE = graphs/db/GREC-GED/GREC-low-level-info/GREC5-lowlevelinfo.csv

# The first argument is used to disable the edge_probability column
define write_header
	for file in $(FILENAMES) ; do \
		echo $(if $(1),$(1))answer,runtime,solvetime,solutions,variables,propagators,propagations,nodes,failures,restarts,peak depth > "$${file}" ; \
	done
endef

define convert_results_to_csv
	for file in $(FILENAMES) ; do \
		sed -i 's/=====UNSATISFIABLE=====/-1/g' "$${file}" ; \
		sed -i 's/^.*distance\s=\s\([0-9]*\.[0-9]*\);/\1/g' "$${file}" ; \
		sed -i 's/[a-zA-Z]*\s=\s.*;/1/g' "$${file}" ; \
		sed -i 's/\s----------\(\s==========\)\?//g' "$${file}" ; \
		sed -i 's/\s%%/,/g' "$${file}" ; \
		sed -i 's/[a-z]*:\s[0-9]*\.[0-9]*\s(\([0-9]*\.[0-9]*\)\sms)/\1/g' "$${file}" ; \
		sed -i 's/[a-z]\+\(\s[a-z]*\)\?:\s\([0-9]*\)/\2/g' "$${file}" ; \
	done
endef

# Arguments: 1. model (cp, vertex-weights, vertex-edge-weights)
# 2. command to run the model (without the filename at the end, but with all the other parameters) 3. output file.
# 4. nonempty if the format is dimacs, empty if it's dzn
define generate_and_run_ged
	format=$(if $(4),dimacs,dzn) ; \
	prefix="graphs/db/$(DATABASE)-GED/$(DATABASE)/" ; \
	filename="graphs/$${format}/$(1)/$(DATABASE)/$${name1%.*}-$${name2%.*}.$(if $(4),txt,dzn)" ; \
	if [ ! -f "$${filename}" ] ; then \
		python convert.py $(1) "$${format}" "$${prefix}$${name1}" "$${prefix}$${name2}"$(if $(INT_VERSION), int,) ; \
	fi ; \
	r=1; while [[ $$r -le $(REPEAT) ]] ; do \
		echo `$(2) $${filename}` >> $(3) ; \
		((r = r + 1)) ; \
	done
endef

define run
	for edge_probability in $(shell seq $(EDGE_PROBABILITY_RANGE)) ; do \
		models=($^) ; \
		filenames=($(FILENAMES)) ; \
		data_files=($(FILENAMES:.csv=.dzn)) ; \
		r=1 ; while [[ $$r -le $(REPEAT) ]] ; do \
			python generator.py $@ $(NUMBER_OF_VERTICES1) $(1) ; \
			for i in "$${!models[@]}" ; do \
				echo "$${edge_probability}, $(if $(2),$(2)$(COMMA),)" `mzn-gecode -s $${models[$$i]} $${data_files[$$i]}` \
					>> "$${filenames[$$i]}" ; \
			done ; \
			((r = r + 1)) ; \
		done ; \
	done
endef

# Can be used for the decision problem by setting the SIZE_OF_CLIQUE variable and changing the model file
clique: models/Clique.mzn
	$(call write_header,edge probability$(COMMA))
	$(call run,"$${edge_probability}"$(if $(SIZE_OF_CLIQUE), $(SIZE_OF_CLIQUE),))
	$(call convert_results_to_csv)

# Pattern graph has a fixed edge probability, target graph has a range of probabilities
subgraph: models/Subgraph.mzn
subgraphClique: models/CommonInducedSubgraph.mzn models/Clique.mzn
subgraph subgraphClique:
	$(call write_header,edge probability$(COMMA))
	$(call run,$(EDGE_PROBABILITY) $(NUMBER_OF_VERTICES2) "$${edge_probability}")
	$(call convert_results_to_csv)

labelledSubgraph: models/LabelledCommonInducedSubgraph.mzn models/Clique.mzn
	$(call write_header,edge probability$(COMMA)label probability$(COMMA))
	for label_probability in $(shell seq $(LABEL_PROBABILITY_RANGE)) ; do \
		$(call run,$(EDGE_PROBABILITY) $(LABEL_PROBABILITY) $(NUMBER_OF_VERTICES2) "$${edge_probability}" \
			"$${label_probability}",$(label_probability)) ; \
	done
	$(call convert_results_to_csv)

ged: models/GraphEditDistance2.mzn models/MinimumWeightClique2.mzn models/MinimumWeightClique.mzn
	$(call write_header)
	echo "size,answer,runtime,node count" > $(MWC_FILE)
	{ \
		models=(cp vertex-weights vertex-edge-weights) ; \
		model_files=($^) ; \
		output_filenames=($(FILENAMES)) ; \
		read ; \
		while IFS=";" read name1 name2 nodes1 nodes2 edges1 edges2 method param distance optimal class1 class2 matching ; do \
			for i in "$${!models[@]}" ; do \
				$(call generate_and_run_ged,"$${models[$$i]}",mzn-gecode -s "$${model_files[$$i]}","$${output_filenames[$$i]}") ; \
			done ; \
			$(call generate_and_run_ged,vertex-weights,./max-weight-clique/colour_order,$(MWC_FILE),1) ; \
		done ; \
	} < $(CSV_FILE)
	$(call convert_results_to_csv)
	sed -i 's/^.*\([0-9]\+\)\s\([0-9]\+\(\.[0-9]\+\)\?\)\s\([0-9]\+\)\s\([0-9]\+\)/\1,\2,\4,\5/g' $(MWC_FILE)
